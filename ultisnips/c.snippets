priority 1

# Overrides
# ---------

# MIT License
snippet mit "MIT License" b
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020 Rahul Salvi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

endsnippet

# TODO message with username and date/time
snippet TODO "TODO message"
// TODO `echo $USER` `date "+%m-%d-%Y %H:%M"` $0
endsnippet

# Preprocessor Commands
# ---------------------

# include statement for system files
snippet incs "system include"
#include <$0>
endsnippet

# include statement for local files
snippet incl "local include"
#include "$0"
endsnippet

# define statement
snippet def "pound define"
#define $0
endsnippet

# header ifndef guard
snippet guard "header guard"
#ifndef ${1:`!v toupper(expand('%:t:r'))`_`!v toupper(expand('%:e'))`}
#define $1
$0
#endif // $1
endsnippet

snippet ifdef "ifdef statement"
#ifdef $1
$0
#endif
endsnippet

# Control Flow
# ------------

snippet if "if statement"
if (${1:condition}) {
	$0
}
endsnippet

snippet else "else statement"
else {
	$0
}
endsnippet

snippet elif "else if statement"
else if (${1:condition}) {
	$0
}
endsnippet

snippet tif "ternary if"
(${1:condition}) ? (${2:true}) : (${3:false});
endsnippet

snippet switch "switch statement"
switch (${1:variable}) {
	case ${2:0}:
		$3
		${4:break;}
	$0
}
endsnippet

snippet case "case inside switch"
case ${1:0}:
	$2
	${3:break;}
$0
endsnippet

snippet default "default inside switch"
default:
	$1
	${2:break;}
endsnippet

snippet ret "return"
return $0;
endsnippet

# Loops
# -----

snippet for "for loop"
for (${1:initialize}; ${2:condition}; ${3:increment}) {
	$0
}
endsnippet

snippet fori "indexed for loop"
for (int ${1:i} = ${2:start}; $1 < ${3:end}; ${4:$1++}) {
	$0
}
endsnippet

snippet while "while loop"
while (${1:condition}) {
	$0
}
endsnippet

snippet do "do while loop"
do {
	$0
} while (${1:condition})
endsnippet

# Functions
# ---------

snippet main "main()"
int main() {
	$0
}
endsnippet

snippet maina "main(argc, argv)"
int main(int argc, char** argv) {
	$0
}
endsnippet

snippet func "function declaration"
${1:void} ${2:name}(${3: parameters});
endsnippet

snippet fund "function definition"
${1:void} ${2:name}(${3: parameters}) {
	$0
}
endsnippet

# Types
# -----

snippet td "typedef"
typedef ${1:original} ${2:custom};
endsnippet

snippet struct "struct"
struct ${1:name} {
	$2
}${0:object};
endsnippet

snippet enum "enumeration"
enum ${1:name} {
	$0
}
endsnippet

# Keywords
# ________

snippet stat "static"
static
endsnippet
